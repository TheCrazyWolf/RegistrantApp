@page "/security/login"
@layout SecurityLayout

@using RegistrantApp.Shared.Dto.Security
@using RegistrantApp.ClientApi
@using RegistrantApp.Shared.PresentationLayer.Security
@using Newtonsoft.Json
@using Blazored.LocalStorage
@using RegistrantApp.Client.Shared.Other
@using RegistrantApp.Shared.Validators

@inject RApi Api;
@inject ISyncLocalStorageService LocalStorage
@inject NavigationManager Navigation;

<PageTitle>Вход в систему</PageTitle>

<div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
    <div class="text-center sm:text-left">
        <h3 class="text-lg font-medium leading-6 text-gray-900" id="modal-title">Вход в систему</h3>
        <div class="mt-4 rounded-md border border-gray-300 px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
            <label for="login" class="block text-xs font-medium text-gray-900">Логин</label>
            <input @bind="_credentials.Login" type="text" name="name" id="login" class="block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm" placeholder="9ХХХХХХХХХ">
        </div>
        <div class="mt-2 rounded-md border border-gray-300 px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
            <label for="password" class="block text-xs font-medium text-gray-900">Пароль</label>
            <input @bind="_credentials.Password" type="password" name="password" id="password" class="block w-full border-0 p-0 text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm" placeholder="*********">
        </div>
        @if (!string.IsNullOrEmpty(_failedReponce))
        {
            <div class="mt-4 rounded-md bg-yellow-50 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <!-- Heroicon name: mini/exclamation-triangle -->
                        <svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-yellow-800">Attention needed</h3>
                        <div class="mt-2 text-sm text-yellow-700">
                            <p>@_failedReponce</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<div class="px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
    <button @onclick="() => SendRequestAsync(_credentials)" type="button" class="inline-flex w-full justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 
text-base font-medium text-white shadow-sm hover:bg-blue-700 sm:ml-3 sm:w-auto sm:text-sm">Вход</button>
</div>

@code {

    private dtoCredentials _credentials { get; set; } = new dtoCredentials();
    private string? _failedReponce = "";

    private async Task SendRequestAsync(dtoCredentials credentials)
    {
        if (string.IsNullOrEmpty(_credentials.Login))
        {
            _failedReponce = "Не заполнен логин";
            return;
        }

        var responce = await Api.Security.CreateSessionAsync(_credentials);

        if (responce.IsSuccessStatusCode && responce.Content is not null)
        {
            var token = JsonConvert.DeserializeObject<AccessToken>(responce.Content);
            LocalStorage.SetItem("token", token?.Token);
            LocalStorage.SetItem("tokenStart", token?.DateTimeSessionStarted);
            LocalStorage.SetItem("tokenExpired", token?.DateTimeSessionExpired);
            Navigation.NavigateTo("/", true);
        }

        if (!responce.IsSuccessStatusCode)
        {
            _failedReponce = responce?.Content?.Replace("\"", string.Empty);
            StateHasChanged();
        }
    }

}